<prism:PrismApplication
    x:Class="ERService.Application.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:helper="clr-namespace:ERService.Infrastructure.Helpers;assembly=ERService.Infrastructure"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:ERService.Application"
    xmlns:prism="http://prismlibrary.com/">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>

                <!--  MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive!  -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatSlider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />

                <!--  Accent and AppTheme setting  -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Steel.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

                <!--  Standard resource, zdefiniowane style  -->
                <ResourceDictionary>

                    <Style
                        x:Key="ToggleDefault"
                        BasedOn="{StaticResource MetroCircleToggleButtonStyle}"
                        TargetType="ToggleButton">
                        <Setter Property="Width" Value="25" />
                        <Setter Property="Height" Value="25" />
                        <Setter Property="Foreground" Value="Gray" />
                    </Style>

                    <Style
                        x:Key="SaveButtonCircle"
                        BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}"
                        TargetType="Button">
                        <Setter Property="Width" Value="40" />
                        <Setter Property="Height" Value="40" />
                        <Setter Property="Margin" Value="5" />
                        <Setter Property="Background" Value="GhostWhite" />
                        <Setter Property="Foreground" Value="Gray" />
                        <Setter Property="ToolTip" Value="Zapisz" />
                        <Setter Property="Content">
                            <Setter.Value>
                                <iconPacks:PackIconModern Kind="Save" />
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style
                        x:Key="CancelButtonCircle"
                        BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}"
                        TargetType="Button">
                        <Setter Property="Width" Value="40" />
                        <Setter Property="Height" Value="40" />
                        <Setter Property="Margin" Value="5" />
                        <Setter Property="Background" Value="GhostWhite" />
                        <Setter Property="Foreground" Value="Gray" />
                        <Setter Property="ToolTip" Value="Powrót" />
                        <Setter Property="Content">
                            <Setter.Value>
                                <iconPacks:PackIconEntypo Padding="1" Kind="Back" />
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                        <Setter Property="Foreground" Value="Black" />
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="Margin" Value="1" />
                        <Setter Property="FontSize" Value="12" />
                    </Style>

                    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                        <Setter Property="FontWeight" Value="Medium" />
                    </Style>

                    <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="ComboBox">
                        <Setter Property="FontSize" Value="14" />
                    </Style>

                    <!-->Konwertery xaml</-->
                    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                    <helper:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />
                    <helper:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                    <helper:BooleanOrConverter x:Key="BooleanOrConverter" />
                    <helper:StatusGroupIntToBrushConverter x:Key="StatusGroupIntToBrushConverter" />
                    <helper:ProgressIntToBrushConverter x:Key="ProgressIntToBrushConverter" />

                    <!--  Zadefiniowane style dla pól tekstowych</  -->
                    <Style
                        x:Name="DeafultTexBoxStyle"
                        BasedOn="{StaticResource {x:Type TextBox}}"
                        TargetType="TextBox">
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="FontSize" Value="12" />
                        <Setter Property="Margin" Value="1" />
                        <!--<Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <StackPanel>
                                        <AdornedElementPlaceholder x:Name="Placeholder" />
                                        <TextBlock
                                            FontSize="12"
                                            Foreground="Black"
                                            Text="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                                    </StackPanel>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>-->
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="BorderBrush" Value="Firebrick" />
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <!--  Style dla elementów DataGrida</  -->
                    <Style
                        x:Key="DataGridColumnStyle"
                        BasedOn="{StaticResource {x:Type TextBlock}}"
                        TargetType="TextBlock">
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="Background" Value="Firebrick" />
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="Margin" Value="10,0,10,0" />
                    </Style>

                    <!--<Style x:Key="DataGridEditingColumnStyle" TargetType="TextBox">
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="BorderBrush" Value="Firebrick" />
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>-->

                    <Style
                        x:Key="DefaultBorderStyle"
                        x:Name="border"
                        TargetType="Border">
                        <Setter Property="BorderBrush" Value="Transparent" />
                        <Setter Property="BorderThickness" Value="1" />
                        <Setter Property="CornerRadius" Value="5" />
                        <Setter Property="Margin" Value="5" />
                        <Setter Property="Opacity" Value="100" />
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush x:Name="BorderColor" Color="#F8F7F7" />
                            </Setter.Value>
                        </Setter>
                        <Setter Property="UseLayoutRounding" Value="True" />
                        <Setter Property="Effect">
                            <Setter.Value>
                                <DropShadowEffect BlurRadius="3" ShadowDepth="1" />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Visibility" Value="Visible">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetProperty="(Effect).Opacity"
                                                From="0.0"
                                                To="1.0"
                                                Duration="0:0:0.8" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style
                        x:Key="DefaultDataGridStyle"
                        BasedOn="{StaticResource MetroDataGrid}"
                        TargetType="DataGrid">
                        <Setter Property="Margin" Value="5" />
                        <Setter Property="CanUserAddRows" Value="False" />
                        <Setter Property="RowHeaderWidth" Value="0" />
                        <Setter Property="AutoGenerateColumns" Value="False" />
                    </Style>

                    <Style
                        x:Key="DefaultTabItemStyle"
                        BasedOn="{StaticResource {x:Type TabItem}}"
                        TargetType="{x:Type TabItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="TabItem">
                                    <Border
                                        x:Name="border"
                                        BorderBrush="LightGray"
                                        BorderThickness="0,0,0,0">
                                        <TextBlock
                                            Margin="1,0"
                                            Padding="10"
                                            FontWeight="SemiBold"
                                            Text="{Binding DataContext.Title}">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="Gainsboro" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,1" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <!--  Scrollbar Thumbs  -->
                    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Grid x:Name="Grid">
                                        <Rectangle
                                            Width="Auto"
                                            Height="Auto"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Fill="Transparent" />
                                        <Border
                                            x:Name="Rectangle1"
                                            Width="Auto"
                                            Height="Auto"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Background="{TemplateBinding Background}"
                                            CornerRadius="5" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="Tag" Value="Horizontal">
                                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <!--  ScrollBars  -->
                    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
                        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
                        <Setter Property="Foreground" Value="LightGray" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="Width" Value="10" />
                        <Setter Property="Margin" Value="1" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid
                                        x:Name="GridRoot"
                                        Width="10"
                                        Background="{TemplateBinding Background}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="0.00001*" />
                                        </Grid.RowDefinitions>

                                        <Track
                                            x:Name="PART_Track"
                                            Grid.Row="0"
                                            Focusable="false"
                                            IsDirectionReversed="true">
                                            <Track.Thumb>
                                                <Thumb
                                                    x:Name="Thumb"
                                                    Background="{TemplateBinding Foreground}"
                                                    Style="{DynamicResource ScrollThumbs}" />
                                            </Track.Thumb>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton
                                                    x:Name="PageUp"
                                                    Command="ScrollBar.PageDownCommand"
                                                    Focusable="false"
                                                    Opacity="0" />
                                            </Track.IncreaseRepeatButton>
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton
                                                    x:Name="PageDown"
                                                    Command="ScrollBar.PageUpCommand"
                                                    Focusable="false"
                                                    Opacity="0" />
                                            </Track.DecreaseRepeatButton>
                                        </Track>
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonSelectBrush}" />
                                        </Trigger>
                                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                        <Trigger Property="Orientation" Value="Horizontal">
                                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="-90" />
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="-90" />
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="Width" Value="Auto" />
                                            <Setter Property="Height" Value="12" />
                                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>


                </ResourceDictionary>

            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</prism:PrismApplication>
